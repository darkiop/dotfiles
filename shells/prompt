#!/bin/bash
#
# original version from koljah:
# https://github.com/koljah-de/simple-bash-prompt/
#
# modified by darkiop

#
# SET PROMPT COLORS
#
COLOR_BRACKET=$COLOR_BLUE
COLOR_COMMAND=$COLOR_WHITE
COLOR_HOST=$COLOR_BLUE
COLOR_DIR=$COLOR_ORANGE
COLOR_SEPARATOR=$COLOR_WHITE
COLOR_RESET=$COLOR_WHITE
COLOR_DATE=$COLOR_GREEN
COLOR_GIT=$COLOR_YELLOW
COLOR_GIT_BRANCH=$COLOR_YELLOW
COLOR_SUDO_ACTIVE=$COLOR_PURPLE
COLOR_SSH_ACTIVE=$COLOR_LIGHT_BLUE
if [ "${EUID}" -ne 0 ]; then
  COLOR_USER=$COLOR_LIGHT_BLUE
  COLOR_SYMBOL=$COLOR_WHITE
else
  # root
  COLOR_USER=$COLOR_RED
  COLOR_SYMBOL=$COLOR_RED
fi

# define the prompt terminator character
SYMBOL="\\$"

# IP
IP=$(/sbin/ip -o -4 addr list | awk '{print $4}' | cut -d/ -f1 | tail -1)

# set the color with the exit status of the last command
COLOR_EXIT_STATUS () {
  if [ $1 -eq 0 ]; then
    echo -e $COLOR_BLUE
  else
    echo -e $COLOR_RED
  fi
}

# git: check if current directory is a git repo
CHECK_IF_GIT_REPO () {
  git rev-parse 2> /dev/null
}

# git: print the branch
GIT_BRANCH () {
  simple_bash_prompt_git_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
  if [ "$simple_bash_prompt_git_branch" = "HEAD" ]; then
    echo "no branch"
   else
    echo $simple_bash_prompt_git_branch
  fi
}

# check sudo
CHECK_IF_SUDO_IS_ACTIVE () {
  if [ "${EUID}" -ne 0 ]; then
    CAN_I_RUN_SUDO=$(sudo -n uptime 2>&1 | grep "load" | wc -l)
    if [ ${CAN_I_RUN_SUDO} -gt 0 ]; then
      return 0 # true
    else
      return 1 # false
    fi
  else
    return 1 # false
  fi
}

# check if ssh session
# https://unix.stackexchange.com/questions/9605/how-can-i-detect-if-the-shell-is-controlled-from-ssh
CHECK_IF_SSH_SESSION () {
  if [[ $(who am i) =~ \([-a-zA-Z0-9\.]+\)$ ]]; then
    return 0 # true
  else
    return 1 # false
  fi
}

# show permissions of current directoy
# %A drwxr-xr-x
# %a 755
SHOW_PERMISSIONS_OF_CUR_DIR () {
  stat -c %a .
}

# 
# BUILD THE PROMPT
# \n = new line
# \u = user
# \h = time
# \w = current dir
#

BUILD_PROMPT () {
CHECK_EXIT_STATUS=$?
BASH_PROMPT=$(COLOR_EXIT_STATUS $CHECK_EXIT_STATUS)"┬"
BASH_PROMPT+=$COLOR_BRACKET"["
BASH_PROMPT+=$COLOR_DATE"\t"
BASH_PROMPT+=$COLOR_BRACKET"]"
BASH_PROMPT+=" "
BASH_PROMPT+=$COLOR_BRACKET"["
if $(CHECK_IF_SSH_SESSION); then
BASH_PROMPT+=$COLOR_SSH_ACTIVE"ssh"$COLOR_SEPARATOR":"
fi
BASH_PROMPT+=$COLOR_USER"\u"$COLOR_SEPARATOR"@"$COLOR_HOST"\h"$COLOR_SEPARATOR"("$COLOR_RESET$IP$COLOR_SEPARATOR")"
BASH_PROMPT+=$COLOR_SEPARATOR": "
BASH_PROMPT+=$COLOR_DIR"\w"
BASH_PROMPT+=$COLOR_RESET" ("$(SHOW_PERMISSIONS_OF_CUR_DIR)")"
BASH_PROMPT+=$COLOR_BRACKET"]"
if $(CHECK_IF_GIT_REPO); then
BASH_PROMPT+=" "
BASH_PROMPT+=$COLOR_BRACKET"["
BASH_PROMPT+=$COLOR_GIT_BRANCH"git:$(GIT_BRANCH)"
BASH_PROMPT+=$COLOR_BRACKET"]"
fi
if $(CHECK_IF_SUDO_IS_ACTIVE); then
BASH_PROMPT+=" "
BASH_PROMPT+=$COLOR_BRACKET"["
BASH_PROMPT+=$COLOR_SUDO_ACTIVE"sudo"
BASH_PROMPT+=$COLOR_BRACKET"]"
fi
BASH_PROMPT+="\n"$(COLOR_EXIT_STATUS $CHECK_EXIT_STATUS)"╰─> "$COLOR_SYMBOL$SYMBOL$COLOR_COMMAND" "
PS1=$BASH_PROMPT
}

export PROMPT_COMMAND=BUILD_PROMPT