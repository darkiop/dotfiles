#!/bin/bash
# Source: https://github.com/koljah-de/simple-bash-prompt/
#
# https://scriptim.github.io/bash-prompt-generator/
# https://www.gnu.org/software/bash/manual/html_node/Controlling-the-Prompt.html

# SET PROMPT COLORS
COLOR_BRACKET=${COLOR_BLUE}
COLOR_COMMAND=${COLOR_WHITE}
COLOR_HOST=${COLOR_BLUE}
COLOR_DIR=${COLOR_ORANGE}
COLOR_SEPARATOR=${COLOR_WHITE}
COLOR_DATE=${COLOR_GREEN}
COLOR_GIT=${COLOR_YELLOW}
COLOR_GIT_BRANCH=${COLOR_YELLOW}
COLOR_SUDO_ACTIVE=${COLOR_PURPLE}
COLOR_SSH_ACTIVE=${COLOR_LIGHT_BLUE}
if [[ ${EUID} -ne 0 ]]; then
	COLOR_USER=${COLOR_LIGHT_BLUE}
	COLOR_SYMBOL=${COLOR_WHITE}
else
	# root
	COLOR_USER=${COLOR_RED}
	COLOR_SYMBOL=${COLOR_RED}
fi

# define the prompt terminator character
SYMBOL="\\$"

# IP
IP=$(ip a | grep 'inet' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | grep -v '172' | grep -v '^100.' | head -n 1 || true)

# set the color with the exit status of the last command
COLOR_EXIT_STATUS() {
	if [[ $1 -eq 0 ]]; then
		echo -e "${COLOR_BLUE}"
	else
		echo -e "${COLOR_RED}"
	fi
}

# git: check if current directory is a git repo
CHECK_IF_GIT_REPO() {
	git rev-parse 2>/dev/null
}

# git-prompt
# https://jon.sprig.gs/blog/post/1940
function GIT_PROMPT() {
	if [[ $(which git) ]]; then
		# options
		# https://blog.backslasher.net/git-prompt-variables.html
		GIT_PS1_DESCRIBE_STYLE='contains'
		GIT_PS1_SHOWCOLORHINTS='y'
		GIT_PS1_SHOWDIRTYSTATE='y'
		GIT_PS1_SHOWSTASHSTATE='y'
		GIT_PS1_SHOWUNTRACKEDFILES='y'
		GIT_PS1_SHOWUPSTREAM='auto'
		# prompt
		# https://stackoverflow.com/questions/25911546/configure-git-branch-in-prompt
		#
		# staged = +
		# stashed = $
		# untracked = %
		echo $(__git_ps1 'git:%s')
	fi
}

# check sudo
CHECK_IF_SUDO_IS_ACTIVE() {
	if [[ ${EUID} -eq 0 ]]; then
		return 1 # false
	else
		if sudo -vn 2>/dev/null; then
			return 0 # true
		else
			return 1 # false
		fi
	fi
}

# check if ssh session
# https://unix.stackexchange.com/questions/9605/how-can-i-detect-if-the-shell-is-controlled-from-ssh
CHECK_IF_SSH_SESSION() {
	if [[ -n ${SSH_CONNECTION} || -n ${SSH_CLIENT} ]]; then
		return 0 # true
	else
		return 1 # false
	fi
}

# show permissions of current directoy
# %A drwxr-xr-x
# %a 755
SHOW_PERMISSIONS_OF_CUR_DIR() {
	stat -c %a .
}

#
# BUILD THE PROMPT
# \n = new line
# \u = user
# \h = time
# \w = current dir
#
BUILD_PROMPT() {
	CHECK_EXIT_STATUS=$?
	BASH_PROMPT="\n"
	BASH_PROMPT+="\[$(COLOR_EXIT_STATUS "${CHECK_EXIT_STATUS}")┬\]"
	BASH_PROMPT+="\[${COLOR_BRACKET}[\]"
	BASH_PROMPT+="\[${COLOR_DATE}\t\]"
	BASH_PROMPT+="\[${COLOR_BRACKET}]\]"
	BASH_PROMPT+="\[ \]"
	BASH_PROMPT+="\[${COLOR_BRACKET}[\]"
	if CHECK_IF_SSH_SESSION; then
		BASH_PROMPT+="\[${COLOR_SSH_ACTIVE}\]ssh\[${COLOR_SEPARATOR}:\]"
	fi
	BASH_PROMPT+="\[${COLOR_USER}\]\u\[${COLOR_SEPARATOR}\]@\[${COLOR_HOST}\]\h\[${COLOR_SEPARATOR}\]\[(${COLOR_RESET}${IP}${COLOR_SEPARATOR})\]"
	BASH_PROMPT+="\[${COLOR_SEPARATOR}: \]"
	BASH_PROMPT+="\[${COLOR_DIR}\w\]"
	BASH_PROMPT+="\[${COLOR_RESET} ($(SHOW_PERMISSIONS_OF_CUR_DIR))\]"
	BASH_PROMPT+="\[${COLOR_BRACKET}]\]"
	if CHECK_IF_GIT_REPO; then
		BASH_PROMPT+="\[ \]"
		BASH_PROMPT+="\[${COLOR_BRACKET}[\]"
		BASH_PROMPT+="\[${COLOR_GIT_BRANCH}\]\[$(GIT_PROMPT)\]"
		BASH_PROMPT+="\[${COLOR_BRACKET}]\]"
	fi
	if CHECK_IF_SUDO_IS_ACTIVE; then
		BASH_PROMPT+="\[ \]"
		BASH_PROMPT+="\[${COLOR_BRACKET}[\]"
		BASH_PROMPT+="\[${COLOR_SUDO_ACTIVE}\]\[sudo\]"
		BASH_PROMPT+="\[${COLOR_BRACKET}]\]"
	fi
	if [[ ${TERM} == "linux" ]]; then
		BASH_PROMPT+="\n\[\$(COLOR_EXIT_STATUS ${CHECK_EXIT_STATUS})\]└─>"
		BASH_PROMPT+="\[${COLOR_SYMBOL}\]${SYMBOL} \[${COLOR_RESET}\]"
	else
		BASH_PROMPT+="\n\[\$(COLOR_EXIT_STATUS ${CHECK_EXIT_STATUS})\]╰─>"
		BASH_PROMPT+="\[${COLOR_SYMBOL}\]${SYMBOL} \[${COLOR_RESET}\]"
	fi
	PS1=${BASH_PROMPT}
}

export PROMPT_COMMAND=BUILD_PROMPT
